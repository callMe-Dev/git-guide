[
  {
    "name": "git-init",
    "gitCmd": "init",
    "description": "<p>El comando git init crea un <span>nuevo repositorio local de Git</span> Se puede usar para convertir un proyecto existente sin versión en un repositorio de Git o para inicializar un repositorio nuevo y vacío.</p><p>La mayoría de los demás comandos de Git no están disponibles fuera de un repositorio inicializado, por lo que este suele ser el primer comando que ejecutará en un nuevo proyecto.</p><p>Aparte del directorio <span>.git</span>, en el directorio raíz del proyecto, un proyecto existente permanece inalterado</p><p>De forma predeterminada, git init inicializará la configuración de Git en la ruta del subdirectorio <span>.git</span></p><p>Puede configurar la variable de entorno <span>$GIT_DIR</span> en una ruta personalizada y git init inicializará los archivos de configuración de Git allí</p><code>$ git <span>init</span></code><p>La flag <span>--bare</span> crea un repositorio que no tiene un directorio de trabajo, lo que hace que sea imposible editar archivos y confirmar cambios en ese repositorio</p><code>$ git <span>init --bare</span> /<span>path</span>/to/<span>repo.git</span></code>"
  },
  {
    "name": "git-clone",
    "gitCmd": "clone",
    "description": "<p>El comando <span>git clone</span> copia un repositorio de Git existente. y  hacer un clon o copia de ese repositorio en un nuevo directorio, en otra  ubicación.</p><p>  El repositorio original se puede ubicar en el sistema de archivos local o  en protocolos compatibles con acceso de máquina remota.</p><p>  Esto es algo así como la verificación de SVN, excepto que 'la copia de  trabajo' es un repositorio Git completo: tiene su propio historial,  administra sus propios archivos y es un entorno completamente aislado del  repositorio original.</p><code>  $ git <span>clone <repo> <direct></span></code><p>Clonando con un <span>tag especifico</span></p><code>  $ git <span>clone --branch 'tag' 'repo'</span></code>"
  },
  {
    "name": "git-add",
    "gitCmd": "add",
    "description": "<p>La función principal del comando <span> git add</span> es promover los  <span>cambios pendientes</span> en el directorio de trabajo en el área de  preparación de git</p><p>  Es útil pensar en él como un búfer entre el directorio de trabajo y el  <span>historial del proyecto</span></p><p>  </span>El área de preparación se considera uno de los 'tres árboles' de Git</span>,  junto con el directorio de trabajo y el historial de confirmaciones.</p> <p>Comando de <span>Stage</span></p><code>$ git <span>add</span></code><p>Subir todos los archivos a <span>Stage</span></p><code>$ git <span>add .</span></code><p>Subir archivo especificos</p><code>$ git <span>add 'file'</span></code>"
  },
  {
    "name": "git-commit",
    "gitCmd": "commit",
    "description": "<p>El comando <span>git commit</span> captura una instantánea de los cambios  realizados actualmente en el proyecto</p><p>  Las instantáneas confirmadas pueden considerarse versiones 'seguras' de un  proyecto,  <span    >Git nunca las cambiará a menos que usted lo solicite    explícitamente</span  ></p><p>  Antes de la ejecución de <span>git commit</span>, el comando git add se  usa para promover o 'preparar' cambios en el proyecto que se almacenarán  en una confirmación</p><code>$ git <span>commit -m 'tu mensaje'</span></code><p>O con un acceso directo, para al confirmacion de los cambios</p><code>$ git <span>commit --ammend</span></code>"
  }
]
